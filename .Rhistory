confusionMatrix(table(data = linear_logistic_predict_smotted,
reference = dados_teste_Smotted[,7]),
positive = '1')
random_forest_model_smotted <- randomForest(is_attributed ~ .,
data = dados_treino_Smotted,
method = "class")
radomForest_predict_smotted <- predict(random_forest_model_smotted,
newdata = dados_teste_Smotted,
type = "class")
random_forest_model_smotted
radomForest_predict_smotted <- predict(random_forest_model_smotted,
newdata = dados_teste_Smotted,
type = "class")
confusionMatrix(table(data = radomForest_predict_smotted,
reference = dados_teste_Smotted[,7]),
positive = '1')
?confusionMatrix
df_previsoes_smotted <- data.frame(observado = dados_teste_Smotted$is_attributed,
previsto = radomForest_predict_smotted)
pred <- prediction(as.numeric(df_previsoes_smotted$previsto), as.numeric(df_previsoes_smotted$observado))
perf <- performance(pred, "tpr","fpr")
plot(perf, col = rainbow(10))
indat<-c("ash Rd", "cIr","at")
grepl("Rd|Ave|Dr|St",indat)
grepl("Rd|Ave|Dr|St",indat)
indat<-c("ash Rd", "cIr","at")
grepl("Rd|Ave|Dr|St",indat)
grepl("Rd,Ave,Dr,St",indat)
grepl("Rd|Ave|Dr|St]",indat)
grepl("Rd|Ave|Dr|St",indat)
history()
history(max.show = 25)
console(-25)
history(max.show = 25)
history()
history()
a(5)
a<-c(1,2,3,4,5)
a(5)
a<-c(25,18,40,45,35)
a(5)
a([length(a)])
height<-c(25,18,40,45,35)
height([length(height)])
height[length(height)]
e<-grep("[Tt]+",d,perl=T,value=T)
d<-c("Twas", "brillig and", "the", "slithy toves")
e<-grep("[Tt]+",d,perl=T,value=T)
e
options(scipen = 10)
delete(e)
remove(e)
detach(d)
mtrx <- matrix( c(3,5,8,3,9,14), nrow = 2,ncol = 3,byrow = TRUE)
newmat <- mtrx %*% t(mtrx)
newmat
mtrx
y <- 1:4
attr(y, "new_attribute") <- "Here's a vector"
attr(y, "new_attribute")
[1] "Here's a vector"
y<-1:5
attr(y, "new_attribute")
late_delivery <- pizza$delivery_min >= 30
which_late <- which(late_delivery)
which_late
late_delivery <- pizza$delivery_min >= 30
ls()
getws()
a <- c(1,2,3)
b <- c(11,21,31)
cbind(a,b)
indat<-c("ash Rd", "cIr","at")
grepl("Rd|Ave|Dr|St",indat)
grepl("Rd,Ave,Dr,St",indat)
grepl("Rd|Ave|Dr|St]",indat)
grepl("Rd|Ave|Dr|St",indat)
grep("Rd|Ave|Dr|St",indat)
grep("Rd,Ave,Dr,St",indat)
grep("Rd|Ave|Dr|St]",indat)
grep("Rd|Ave|Dr|St",indat)
grep("[Rd|Ave|Dr|St]",indat)
grep(["Rd","Ave","Dr","St"],indat)
setwd("C:/Users/rafael.rampineli/OneDrive/FilestoStudy/Formacao_Cientista_Dados/4.MachineLearning/Cap11_Classificacao_Regressao_Support_Vector_Machines_SVMS\R")
R")
]]
setwd("C:/Users/rafael.rampineli/OneDrive/FilestoStudy/Formacao_Cientista_Dados/4.MachineLearning/Cap11_Classificacao_Regressao_Support_Vector_Machines_SVMS/R")
setwd("C:/Users/rafael.rampineli/OneDrive/FilestoStudy/Formacao_Cientista_Dados/4.MachineLearning/Cap11_Classificacao_Regressao_Support_Vector_Machines_SVMS/R")
getwd()
install.packages("gains")
install.packages("pROC")
install.packages("ROSE")
install.packages("mice")
library(dplyr) # Manipulação de Dados
library(caret) # Machine Learning
library(gains) # Interpretar modelo SVM
library(pROC)  # Construir a curva ROC para interpretar as métricas
library(ROCR)  # Construir gráficos para interpretação de métricas
library(ROSE)  # Manipulação de dados
library(e1071) # Também tem o Algoritmo SVM
library(mice)  # Inputação de Dados para valores missing
dataset_clientes <- read.csv("dados/cartoes_clientes.csv")
View(dataset_clientes)
#### Análise Exploratória dos Dados ####
str(dataset_clientes)
#### Análise Exploratória dos Dados ####
str(dataset_clientes)
summary(dataset_clientes$card2spent)
dataset_clientes <- dataset_clientes[-1]
sapply(dataset_clientes, function(x)sum(is.na(x)))
# Checando se a variável alvo está balanceada
table(dataset_clientes$Customer_cat)
prop.table(table(dataset_clientes$Customer_cat)) * 100
as.data.frame(table(dataset_clientes$Customer_cat))
boxplot(dataset_clientes$card2spent)
summary(dataset_clientes$card2spent)
hist(dataset_clientes$card2spent)
plot(dataset_clientes$card2spent, dataset_clientes$hourstv, xlab = "Gasto Cartão", ylab = "Horas TV")
setwd("C:/Users/rafael.rampineli/OneDrive/FilestoStudy/Formacao_Cientista_Dados/4.MachineLearning/Cap11_Classificacao_Regressao_Support_Vector_Machines_SVMS/R")
library(dplyr)
library(caret)
library(gains)
library(pROC)
library(ROCR)
library(ROSE)
library(e1071)
library(mice)
dataset_clientes <- read.csv("dados/cartoes_clientes.csv")
View(dataset_clientes)
dataset_clientes <- dataset_clientes[-1]
to.factors <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(paste(df[[variable]]))
}
return(df)
}
categorical.vars <- c('townsize', 'jobcat', 'retire', 'hometype', 'addresscat',
'cartype', 'carvalue', 'carbought', 'card2', 'gender', 'card2type',
'card2benefit', 'card2benefit', 'bfast', 'internet', 'Customer_cat')
str(dataset_clientes)
dataset_clientes <- to.factors(df = dataset_clientes, variables = categorical.vars)
str(dataset_clientes)
str(dataset_clientes$gender)
sapply(dataset_clientes, function(x)sum(is.na(x)))
sum(is.na(dataset_clientes))
fac_col <- as.integer(0)
facnames <- names(Filter(is.factor, dataset_clientes))
k = 1
facnames
length(facnames)
type(facnames)
str(facnames)
for(i in facnames){
while (k <= length(facnames)){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes))
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
length(facnames).value
length(facnames)[0]
length(facnames)[]
length(facnames)[1]
length(facnames)[2]
for(i in facnames){
while (k <= 16){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes))
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
fac_col
for(i in facnames){
while (k <= length(facnames)){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes)) # Busca o nome da coluna i dentro do dataset e salva o index dentro de fac_col
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
fac_col
for(i in facnames){
while (k <= length(facnames)){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes)) # Busca o nome da coluna i dentro do dataset e salva o index dentro de fac_col
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
for(i in facnames){
while (k <= length(facnames)){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes)) # Busca o nome da coluna i dentro do dataset e salva o index dentro de fac_col
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
for(i in facnames){
while (k <= length(facnames)){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes)) # Busca o nome da coluna i dentro do dataset e salva o index dentro de fac_col
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
rm(fac_col)
for(i in facnames){
while (k <= length(facnames)){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes)) # Busca o nome da coluna i dentro do dataset e salva o index dentro de fac_col
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
fac_col
fac_col <- as.integer(0)
for(i in facnames){
while (k <= length(facnames)){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes)) # Busca o nome da coluna i dentro do dataset e salva o index dentro de fac_col
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
fac_col
for(i in facnames){
while (k <= 16){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes)) # Busca o nome da coluna i dentro do dataset e salva o index dentro de fac_col
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
fac_col
rm(fac_col)
fac_col <- as.integer(0)
for(i in facnames){
while (k <= 16){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes)) # Busca o nome da coluna i dentro do dataset e salva o index dentro de fac_col
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
fac_col
fac_col <- as.integer(0)
k = 1
for(i in facnames){
while (k <= length(facnames)){ # 16 é o numero de variaveis categóricas
grep(i, colnames(dataset_clientes)) # Busca o nome da coluna i dentro do dataset e salva o index dentro de fac_col
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
fac_col
k = 1
fac_col <- as.integer(0)
for(i in facnames){
while (k <= length(facnames)){ # numero de variaveis categóricas
#grep(i, colnames(dataset_clientes)) # Busca o nome da coluna i dentro do dataset e salva o index dentro de fac_col
fac_col[k] <- grep(i, colnames(dataset_clientes))
k = k + 1
break
}
}
fac_col
?mice
?mice::complete
regra_imputacao <- mice((dataset_clientes[,-c(fac_col)]),
m = 1,
maxit = 50,
meth = 'pmm',
seed = 500)
total_data <- complete(regra_imputacao, 1)
View(total_data)
dataset_clientes_final <- cbind(total_data, dataset_clientes[,c(fac_col)])
View(dataset_clientes_final)
dim(dataset_clientes_final)
str(dataset_clientes_final)
str(dataset_clientes_final$gender)
sapply(dataset_clientes_final, function(x)sum(is.na(x)))
sum(is.na(dataset_clientes_final))
sum(is.na(dataset_clientes))
dataset_clientes_final$Customer_cat <- as.factor(dataset_clientes_final$Customer_cat)
str(dataset_clientes_final$Customer_cat)
set.seed(100)
?sample
indice_divide_dados <- sample(x = nrow(dataset_clientes_final),
size = 0.8 * nrow(dataset_clientes_final),
replace = FALSE) # Amostragem sem substituição
View(indice_divide_dados)
dados_treino <- dataset_clientes_final[indice_divide_dados,]
dados_teste <- dataset_clientes_final[-indice_divide_dados,]
View(dados_treino)
prop.table(table(dados_treino$Customer_cat)) * 100
set.seed(301)
install.packages("DMwR")
library(DMwR)
dim(dataset_clientes_final)
dados_treino_balanceados <- SMOTE(Customer_cat ~ ., dados_treino, perc.over = 3000, perc.under = 200)
dim(dados_treino_balanceados)
prop.table(table(dados_treino_balanceados$Customer_cat)) * 100
class(dados_treino_balanceados)
class(dados_teste)
write.csv(dados_treino_balanceados, "dados/dados_treino_balanceados.csv")
write.csv(dados_teste, "dados/dados_teste.csv")
sum(is.na(dados_treino_balanceados))
sum(is.na(dados_teste))
setwd("C:/Users/rafael.rampineli/OneDrive/FilestoStudy/Formacao_Cientista_Dados/4.MachineLearning/Cap11_Classificacao_Regressao_Support_Vector_Machines_SVMS/R")
library(dplyr)
library(caret)
library(pROC)
library(e1071)
library(mice)
library(readr)
dados_treino1 <- read.csv("dados/dados_treino_balanceados.csv")
dados_teste1 <- read.csv("dados/dados_teste.csv")
dim(dados_treino1)
dim(dados_teste1)
dados_treino <- read_csv("dados/dados_treino_balanceados.csv")
dados_teste <- read_csv("dados/dados_teste.csv")
dim(dados_teste)
dim(dados_treino)
dados_treino <- dados_treino[-1]
dados_teste <- dados_teste[-1]
dim(dados_treino)
dim(dados_teste)
str(dados_treino$Customer_cat)
View(dados_treino$Customer_cat)
dados_treino$Customer_cat <- as.numeric(as.factor(dados_treino$Customer_cat))
str(dados_treino$Customer_cat)
View(dados_treino$Customer_cat)
dados_treino$Customer_cat <- as.factor(dados_treino$Customer_cat)
str(dados_treino$Customer_cat)
str(dados_treino$Customer_cat)
str(dados_treino$Customer_cat)
dados_teste$Customer_cat <- as.numeric(as.factor(dados_teste$Customer_cat))
dados_teste$Customer_cat <- as.factor(dados_teste$Customer_cat)
str(dados_teste$Customer_cat)
sdsdsadsad
dsd
sad
sads
dsa
ds
?svm
modelo_v1 <- svm(Customer_cat ~ ., data = dados_treino, na.action = na.omit, scale = TRUE)
summary(modelo_v1)
previsoes_v1 <- predict(modelo_v1, newdata = dados_teste)
caret::confusionMatrix(previsoes_v1, dados_teste$Customer_cat)
length(dados_teste$Customer_cat)
length(previsoes_v1)
sum(is.na(dados_teste))
sum(is.na(dados_teste))
sum(is.na(dados_teste))
install.packages("multiROC")
dados_teste = na.omit(dados_teste)
length(dados_teste$Customer_cat)
sum(is.na(dados_teste))
caret::confusionMatrix(previsoes_v1, dados_teste$Customer_cat)
library(multiROC)
curva_roc <- multiclass.roc(response = dados_teste$Customer_cat, predictor = previsoes_v1)
class(dados_teste$Customer_cat)
class(previsoes_v1)
curva_roc <- multiclass.roc(response = dados_teste$Customer_cat, predictor = as.numeric(as.factor(previsoes_v1)))
curva_roc$auc
valores_previstos <- data.frame(as.numeric(as.factor(previsoes_v1)))
colnames(valores_previstos) <- ("previsão")
valores_reais <- data.frame(as.numeric(as.factor(dados_teste$Customer_cat)))
colnames(valores_reais) <- ("valor_real")
final_df <- cbind(valores_reais, valores_previstos)
View(final_df)
set.seed(182)
?tune
modelo_grid1 <- tune(svm,
Customer_cat ~ .,
data = dados_treino,
kernel = 'linear',
ranges = list(cost = c(0.05, 0.1, 0.5, 1, 2)))
summary(modelo_grid1)
# Parâmetros do melhor modelo
modelo_grid1$best.parameters
modelo_grid1$best.model
modelo_v2 <- modelo_grid1$best.model
summary(modelo_v2)
previsoes_v2 <- predict(modelo_v2, dados_teste)
confusionMatrix(previsoes_v2, dados_teste$Customer_cat)
curva_roc <- multiclass.roc(response = dados_teste$Customer_cat, predictor = as.numeric(as.factor(previsoes_v2)))
curva_roc$auc
caret::confusionMatrix(previsoes_v1, dados_teste$Customer_cat)
confusionMatrix(previsoes_v2, dados_teste$Customer_cat)
curva_roc$auc
curva_roc$auc
curva_roc_v2 <- multiclass.roc(response = dados_teste$Customer_cat, predictor = as.numeric(as.factor(previsoes_v2)))
curva_roc_v2$auc
curva_roc <- multiclass.roc(response = dados_teste$Customer_cat, predictor = as.numeric(as.factor(previsoes_v1)))
curva_roc$auc
curva_roc
confusionMatrix(previsoes_v2, dados_teste$Customer_cat)
set.seed(182)
modelo_grid2 <- tune(svm,
Customer_cat ~ .,
data = dados_treino,
kernel='radial',
ranges = list(cost = c(0.01,0.05,0.1,0.5,1,2),
gamma = c(0.0001,0.001,0.01,.05,0.1,0.01,1,2)))
summary(modelo_grid2)
summary(modelo_grid2)
modelo_grid2$best.parameters
modelo_v3 <- modelo_grid2$best.model
previsoes_v3 <- predict(modelo_v3, dados_teste)
confusionMatrix(previsoes_v3, dados_teste$Customer_cat)
curva_roc <- multiclass.roc(response = dados_teste$Customer_cat, predictor = as.numeric(as.factor(previsoes_v3)))
curva_roc$auc
set.seed(182)
modelo_grid3 <- tune(svm,
Customer_cat ~ .,
data = dados_treino,
kernel = 'polynomial',
ranges = list(cost = c(1,2), degree = c(2,3,4)))
summary(modelo_grid3)
modelo_grid3$best.parameters
modelo_v4 <- modelo_grid3$best.model
previsoes_v4 <- predict(modelo_v4, dados_teste)
confusionMatrix(previsoes_v4, dados_teste$Customer_cat)
curva_roc <- multiclass.roc(response = dados_teste$Customer_cat, predictor = as.numeric(as.factor(previsoes_v4)))
curva_roc$auc
confusionMatrix(previsoes_v4, dados_teste$Customer_cat)
caret::confusionMatrix(previsoes_v4, dados_teste$Customer_cat)
resultados_v1 <- caret::confusionMatrix(previsoes_v1, dados_teste$Customer_cat)
resultados_v1$overall
resultados_v1$byClass
acuracia_v1 <- resultados_v1$overall['Accuracy']
curva_roc <- multiclass.roc(response = dados_teste$Customer_cat, predictor = as.numeric(as.factor(previsoes_v1)))
score_auc_v1 <- curva_roc$auc
acuracia_v1
score_auc_v1
vetor_modelo1 <- c("Modelo1 Kernel RBF", round(acuracia_v1, 4), round(score_auc_v1, 4))
vetor_modelo1
resultados_v2 <- caret::confusionMatrix(previsoes_v2, dados_teste$Customer_cat)
acuracia_v2 <- resultados_v2$overall['Accuracy']
curva_roc <- multiclass.roc(response = dados_teste$Customer_cat, predictor = as.numeric(as.factor(previsoes_v2)))
score_auc_v2 <- curva_roc$auc
# Vetor com os resultados de avaliação do Modelo v2
vetor_modelo2 <- c("Modelo2 Kernel Linear", round(acuracia_v2, 4), round(score_auc_v2, 4))
resultados_v3 <- caret::confusionMatrix(previsoes_v3, dados_teste$Customer_cat)
acuracia_v3 <- resultados_v3$overall['Accuracy']
curva_roc <- multiclass.roc(response = dados_teste$Customer_cat, predictor = as.numeric(as.factor(previsoes_v3)))
score_auc_v3 <- curva_roc$auc
# Vetor com os resultados de avaliação do Modelo v1
vetor_modelo3 <- c("Modelo3 Kernel RBF Tunning", round(acuracia_v3, 4), round(score_auc_v3, 4))
resultados_v4 <- caret::confusionMatrix(previsoes_v4, dados_teste$Customer_cat)
acuracia_v4 <- resultados_v4$overall['Accuracy']
curva_roc <- multiclass.roc(response = dados_teste$Customer_cat, predictor = as.numeric(as.factor(previsoes_v4)))
score_auc_v4 <- curva_roc$auc
# Vetor com os resultados de avaliação do Modelo v1
vetor_modelo4 <- c("Modelo4 Kernel Polinomial", round(acuracia_v4, 4), round(score_auc_v4, 4))
rbind(vetor_modelo1, vetor_modelo2, vetor_modelo3, vetor_modelo4)
compara_modelos <- rbind(vetor_modelo1, vetor_modelo2, vetor_modelo3, vetor_modelo4)
View(compara_modelos)
rownames(compara_modelos) <- c("1", "2", "3", "4")
colnames(compara_modelos) <- c("Modelo", "Acuracia", "AUC")
View(compara_modelos)
class(compara_modelos)
compara_modelos <- as.data.frame(compara_modelos)
class(compara_modelos)
View(compara_modelos)
library(ggplot2)
ggplot(compara_modelos, aes(x = Modelo, y = Acuracia, fill = Modelo)) +
geom_bar(stat = "identity")
?ggplot
ggplot(compara_modelos, aes(x = Modelo, y = AUC, fill = Modelo)) +
geom_bar(stat = "identity")
ggplot(compara_modelos, aes(x = Modelo, y = Acuracia, fill = Modelo)) +
geom_bar()
ggplot(compara_modelos, aes(x = Modelo, y = Acuracia, fill = Modelo)) +
geom_bar(stat = "identity")
?saveRDS
saveRDS(modelo_v2, "modelos/modelo_v2.rds")
modelo_svm <- readRDS("modelos/modelo_v2.rds")
print(modelo_svm)
print(modelo_v1)
summary(modelo_v2)
novos_clientes <- read.csv("dados/novos_clientes.csv", header = TRUE)
View(novos_clientes)
dim(novos_clientes)
previsoes_novos_clientes <- predict(modelo_svm, novos_clientes)
previsoes_gastos_novos_clientes <- data.frame(as.numeric(as.factor(previsoes_novos_clientes)))
colnames(previsoes_gastos_novos_clientes) <- ("Previsão de Gasto")
idades_novos_clientes <- data.frame(novos_clientes$age)
colnames(idades_novos_clientes) <- ("Idades")
resultado_final <- cbind(idades_novos_clientes, previsoes_gastos_novos_clientes)
View(resultado_final)
library(plyr)
resultado_final$`Previsão de Gasto` <- mapvalues(resultado_final$`Previsão de Gasto`,
from = c(1,2,3),
to = c("Alto", "Médio", "Baixo"))
View(resultado_final)
View(resultado_final)
View(resultado_final)
colnames(previsoes_gastos_novos_clientes) <- ("Previsao_Gasto")
resultado_final <- cbind(idades_novos_clientes, previsoes_gastos_novos_clientes)
resultado_final$Previsao_Gasto <- mapvalues(resultado_final$Previsao_Gasto,
from = c(1,2,3),
to = c("Alto", "Médio", "Baixo"))
View(resultado_final)
write.csv(resultado_final, "dados/resultado_final.csv")
resultado_final <- cbind(novos_clientes, previsoes_gastos_novos_clientes)
View(resultado_final)
